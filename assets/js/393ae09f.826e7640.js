"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["1704"],{311:function(e,t,n){n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var s=n(6021),i=n(3112),r=n(1131);let c={slug:"introducing-abstract-newable-type",title:"Introducing AbstractNewable Type",authors:["notaphplover"],tags:["types"]},a=void 0,o={authorsImageUrls:[void 0]},l=[{value:"What&#39;s new?",id:"whats-new",level:2},{value:"The Problem with Function",id:"the-problem-with-function",level:3},{value:"The Solution: AbstractNewable",id:"the-solution-abstractnewable",level:3},{value:"Updated ServiceIdentifier Type",id:"updated-serviceidentifier-type",level:2},{value:"Benefits for the Community",id:"benefits-for-the-community",level:2}];function d(e){let t={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["We've improved the type safety and semantics of InversifyJS with the introduction of the ",(0,i.jsx)(t.code,{children:"AbstractNewable"})," type."]}),"\n","\n",(0,i.jsx)(t.h2,{id:"whats-new",children:"What's new?"}),"\n",(0,i.jsxs)(t.p,{children:["In the latest update to ",(0,i.jsx)(t.code,{children:"inversify"}),", we've replaced the generic ",(0,i.jsx)(t.code,{children:"Function"})," type in ",(0,i.jsx)(t.code,{children:"ServiceIdentifier"})," with a more specific and type-safe ",(0,i.jsx)(t.code,{children:"AbstractNewable"})," type."]}),"\n",(0,i.jsx)(t.h3,{id:"the-problem-with-function",children:"The Problem with Function"}),"\n",(0,i.jsxs)(t.p,{children:["Previously, ",(0,i.jsx)(t.code,{children:"ServiceIdentifier<T>"})," included ",(0,i.jsx)(t.code,{children:"Function"})," to support abstract classes as service identifiers. While this worked functionally, it had several drawbacks:"]}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Lack of type safety"}),": ",(0,i.jsx)(t.code,{children:"Function"})," is too broad and can represent any function, not just abstract constructors"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Poor semantics"}),": It doesn't clearly communicate the intent to represent abstract classes"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Developer experience"}),": No intellisense or type checking benefits when working with abstract class identifiers"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"the-solution-abstractnewable",children:"The Solution: AbstractNewable"}),"\n",(0,i.jsxs)(t.p,{children:["The new ",(0,i.jsx)(t.code,{children:"AbstractNewable"})," type is specifically designed to represent abstract class constructors:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"export type AbstractNewable<\n  TInstance = unknown,\n  TArgs extends unknown[] = any[],\n> = abstract new (...args: TArgs) => TInstance;\n"})}),"\n",(0,i.jsx)(t.p,{children:"This type provides:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Better type safety"}),": Only accepts abstract constructors"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Clear semantics"}),": Explicitly represents the intent to work with abstract classes"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Enhanced developer experience"}),": Better intellisense and type checking"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"updated-serviceidentifier-type",children:"Updated ServiceIdentifier Type"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"ServiceIdentifier"})," type now looks like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"export type ServiceIdentifier<TInstance = unknown> =\n  | string\n  | symbol\n  | Newable<TInstance>\n  | AbstractNewable<TInstance>; // \u2728 New!\n"})}),"\n",(0,i.jsx)(t.p,{children:"This change means you can now use abstract classes as service identifiers with better type safety:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"abstract class AbstractService {\n  abstract doSomething(): void;\n}\n\nclass ConcreteService extends AbstractService {\n  doSomething(): void {\n    console.log('Doing something...');\n  }\n}\n\n// Both of these now have better type safety\nconst serviceId1: ServiceIdentifier<AbstractService> = AbstractService;\nconst serviceId2: ServiceIdentifier<ConcreteService> = ConcreteService;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"benefits-for-the-community",children:"Benefits for the Community"}),"\n",(0,i.jsx)(t.p,{children:"This improvement brings several benefits:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Enhanced type safety"}),": Catch more errors at compile time"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Better documentation"}),": Code is more self-documenting with explicit types"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Improved developer experience"}),": Better intellisense and autocomplete"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Cleaner foundation"}),": Better foundation for future abstract class-related features"]}),"\n"]})]})}function h(e={}){let{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},6021:function(e){e.exports=JSON.parse('{"permalink":"/blog/introducing-abstract-newable-type","source":"@site/blog/2025-06-23-introducing-abstract-newable-type/index.mdx","title":"Introducing AbstractNewable Type","description":"We\'ve improved the type safety and semantics of InversifyJS with the introduction of the AbstractNewable type.","date":"2025-06-23T00:00:00.000Z","tags":[{"inline":false,"label":"Types","permalink":"/blog/tags/types","description":"InversifyJS types related posts"}],"readingTime":1.47,"hasTruncateMarker":true,"authors":[{"name":"Roberto Pintos L\xf3pez","title":"InversifyJS maintainer","url":"https://github.com/notaphplover","page":{"permalink":"/blog/authors/notaphplover"},"socials":{"github":"https://github.com/notaphplover"},"imageURL":"https://github.com/notaphplover.png","key":"notaphplover"}],"frontMatter":{"slug":"introducing-abstract-newable-type","title":"Introducing AbstractNewable Type","authors":["notaphplover"],"tags":["types"]},"unlisted":false,"nextItem":{"title":"Announcing 7.0.0-alpha.5","permalink":"/blog/announcing-inversify-7-0-0-alpha-5-prerelease"}}')}}]);