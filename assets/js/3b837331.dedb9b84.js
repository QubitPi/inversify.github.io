"use strict";(self.webpackChunk_inversifyjs_inversify_docs_site=self.webpackChunk_inversifyjs_inversify_docs_site||[]).push([["7995"],{508:function(n,e,i){i.r(e),i.d(e,{default:()=>y,frontMatter:()=>d,metadata:()=>t,assets:()=>l,toc:()=>p,contentTitle:()=>c});var t=JSON.parse('{"id":"introduction/dependency-inversion","title":"Dependency inversion","description":"To apply the dependency inversion principle, you can use injection symbols:","source":"@site/docs/introduction/dependency-inversion.mdx","sourceDirName":"introduction","slug":"/introduction/dependency-inversion","permalink":"/docs/next/introduction/dependency-inversion","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Dependency inversion"},"sidebar":"tutorialSidebar","previous":{"title":"Getting started","permalink":"/docs/next/introduction/getting-started"},"next":{"title":"Binding","permalink":"/docs/next/fundamentals/binding"}}'),o=i("3112"),s=i("4300"),r=i("6531"),a=i("8302");let d={sidebar_position:2,title:"Dependency inversion"},c="Dependency inversion",l={},p=[];function u(n){let e={admonition:"admonition",h1:"h1",header:"header",p:"p",...(0,s.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"dependency-inversion",children:"Dependency inversion"})}),"\n",(0,o.jsx)(e.p,{children:"To apply the dependency inversion principle, you can use injection symbols:"}),"\n",(0,o.jsx)(r.Z,{language:"ts",children:a}),"\n",(0,o.jsx)(e.p,{children:"By using symbols, you can provide interface implementations in a way that the dependent class is not aware of the dependency implementation details."}),"\n",(0,o.jsx)(e.admonition,{type:"note",children:(0,o.jsx)(e.p,{children:"Although symbols are recommended for this purpose, InversifyJS also supports using Classes and string literals as service identifiers."})})]})}function y(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}},8302:function(n){n.exports="import { Container, inject, injectable } from 'inversify';\n\ninterface Weapon {\n  damage: number;\n}\n\nconst weaponServiceId: symbol = Symbol.for('WeaponServiceId');\n\n@injectable()\nclass Katana {\n  public readonly damage: number = 10;\n}\n\n@injectable()\nclass Ninja {\n  constructor(\n    @inject(weaponServiceId)\n    public readonly weapon: Weapon,\n  ) {}\n}\n\nconst container: Container = new Container();\n\ncontainer.bind(Ninja).toSelf();\ncontainer.bind(weaponServiceId).to(Katana);\n\nconst ninja: Ninja = container.get(Ninja);\n\nconsole.log(ninja.weapon.damage);"}}]);